{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastMLX","text":"<p>FastMLX is a high-performance, production-ready API for hosting MLX models, including Vision Language Models (VLMs) and Language Models (LMs). It provides an easy-to-use interface for integrating powerful machine learning capabilities into your applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>OpenAI-compatible API: Easily integrate with existing applications that use OpenAI's API.</li> <li>Dynamic Model Loading: Load MLX models on-the-fly or use pre-loaded models for better performance.</li> <li>Support for Multiple Model Types: Compatible with various MLX model architectures.</li> <li>Image Processing Capabilities: Handle both text and image inputs for versatile model interactions.</li> <li>Efficient Resource Management: Optimized for high-performance and scalability.</li> <li>Error Handling: Robust error management for production environments.</li> <li>Customizable: Easily extendable to accommodate specific use cases and model types.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with FastMLX: Learn how to install and set up FastMLX in your environment.</p> <p>Explore Examples: Hands-on guides, such as:</p> <ul> <li>Chatbot application</li> <li>Function calling</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install FastMLX on your system by running the following command:</p> <pre><code>pip install -U fastmlx\n</code></pre>"},{"location":"#running-the-server","title":"Running the Server","text":"<p>Start the FastMLX server using the following command:</p> <pre><code>fastmlx\n</code></pre> <p>or with multiple workers for improved performance:</p> <pre><code>fastmlx --workers 4\n</code></pre>"},{"location":"#making-api-calls","title":"Making API Calls","text":"<p>Once the server is running, you can interact with the API. Here's an example using a Vision Language Model:</p> <pre><code>import requests\nimport json\n\nurl = \"http://localhost:8000/v1/chat/completions\"\nheaders = {\"Content-Type\": \"application/json\"}\ndata = {\n    \"model\": \"mlx-community/nanoLLaVA-1.5-4bit\",\n    \"image\": \"http://images.cocodataset.org/val2017/000000039769.jpg\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"What are these\"}],\n    \"max_tokens\": 100\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\nprint(response.json())\n</code></pre>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Check out the Installation guide for detailed setup instructions.</li> <li>Learn more about the API usage in the Usage section.</li> <li>Explore advanced features and configurations in the API Reference.</li> <li>If you're interested in contributing, see our Contributing guidelines.</li> </ul>"},{"location":"#license","title":"License","text":"<p>FastMLX is free software, licensed under the Apache Software License 2.0.</p> <p>For more detailed information and advanced usage, please explore the rest of our documentation. If you encounter any issues or have questions, don't hesitate to report an issue on our GitHub repository.</p> <p>Happy coding with FastMLX!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v010-11-july-2024","title":"[v0.1.0] - 11 July 2024","text":"<p>What's Changed</p> <ul> <li>Add support for token streaming and custom CORS by @Blaizzy</li> <li>Add support for Parallel calls by @Blaizzy</li> <li>Add Parallel calls usage  by @Blaizzy</li> </ul> <p>Fixes :</p> <ul> <li>Cross origin Support #2</li> <li>Max tokens not overriding #5</li> </ul>"},{"location":"changelog/#v001-09-july-2024","title":"[v0.0.1] - 09 July 2024","text":"<p>What's Changed</p> <ul> <li>Setup FastMLX by @Blaizzy</li> <li>Add support for VLMs by @Blaizzy</li> <li>Add support for LMs by by @Blaizzy</li> </ul> <p>New Contributors</p> <ul> <li>@Blaizzy made their first contribution in https://github.com/Blaizzy/fastmlx/pull/1</li> </ul>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>The FastMLX API server can be configured using various command-line arguments. Here is a detailed reference for each available option. </p>"},{"location":"cli_reference/#usage","title":"Usage","text":"<pre><code>fastmlx [OPTIONS]\n</code></pre>"},{"location":"cli_reference/#options","title":"Options","text":""},{"location":"cli_reference/#-allowed-origins","title":"<code>--allowed-origins</code>","text":"<ul> <li>Type: List of strings</li> <li>Default: <code>[\"*\"]</code></li> <li>Description: List of allowed origins for CORS (Cross-Origin Resource Sharing).</li> </ul>"},{"location":"cli_reference/#-host","title":"<code>--host</code>","text":"<ul> <li>Type: String</li> <li>Default: <code>\"0.0.0.0\"</code></li> <li>Description: Host to run the server on.</li> </ul>"},{"location":"cli_reference/#-port","title":"<code>--port</code>","text":"<ul> <li>Type: Integer</li> <li>Default: <code>8000</code></li> <li>Description: Port to run the server on.</li> </ul>"},{"location":"cli_reference/#-reload","title":"<code>--reload</code>","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>False</code></li> <li>Description: Enable auto-reload of the server. Only works when 'workers' is set to None.</li> </ul>"},{"location":"cli_reference/#-workers","title":"<code>--workers</code>","text":"<ul> <li>Type: Integer or Float</li> <li>Default: Calculated based on <code>FASTMLX_NUM_WORKERS</code> environment variable or 2 if not set.</li> <li> <p>Description: Number of workers. This option overrides the <code>FASTMLX_NUM_WORKERS</code> environment variable.</p> </li> <li> <p>If an integer, it specifies the exact number of workers to use.</p> </li> <li>If a float, it represents the fraction of available CPU cores to use (minimum 1 worker).</li> <li>To use all available CPU cores, set it to 1.0.</li> </ul> <p>Examples:   - <code>--workers 1</code>: Use 1 worker   - <code>--workers 1.0</code>: Use all available CPU cores   - <code>--workers 0.5</code>: Use half of the available CPU cores   - <code>--workers 0.0</code>: Use 1 worker</p>"},{"location":"cli_reference/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>FASTMLX_NUM_WORKERS</code>: Sets the default number of workers if not specified via the <code>--workers</code> argument.</li> </ul>"},{"location":"cli_reference/#examples","title":"Examples","text":"<ol> <li> <p>Run the server on localhost with default settings:    <pre><code>fastmlx\n</code></pre></p> </li> <li> <p>Run the server on a specific host and port:    <pre><code>fastmlx --host 127.0.0.1 --port 5000\n</code></pre></p> </li> <li> <p>Run the server with 4 workers:    <pre><code>fastmlx --workers 4\n</code></pre></p> </li> <li> <p>Run the server using half of the available CPU cores:    <pre><code>fastmlx --workers 0.5\n</code></pre></p> </li> <li> <p>Enable auto-reload (for development):    <pre><code>fastmlx --reload\n</code></pre></p> </li> </ol> <p>Remember that the <code>--reload</code> option is intended for development purposes and should not be used in production environments.</p>"},{"location":"community_projects/","title":"Community Projects","text":"<p>Here are some projects built by the community that use FastMLX:</p> <ol> <li>FastMLX-MineCraft by Mathieu</li> <li>MLX Chat by Nils Durner</li> <li>AI Home Hub by Prince Canuma</li> </ol>"},{"location":"community_projects/#projects-in-detail","title":"PROJECTS IN DETAIL","text":""},{"location":"community_projects/#fastmlx-minecraft-by-mathieu","title":"FastMLX-MineCraft by Mathieu","text":""},{"location":"community_projects/#mlx-chat-by-nils-durner","title":"MLX Chat by Nils Durner","text":"<p>Chat interface for MLX for on-device Language Model use on Apple Silicon. Built on FastMLX.</p> <p></p>"},{"location":"community_projects/#home-hub-by-prince-canuma","title":"Home Hub by Prince Canuma","text":"<p>Turning your Mac into an AI home server.</p> <p></p>"},{"location":"contributing/","title":"Join us in making a difference!","text":"<p>Your contributions are always welcome and we would love to see how you can make our project even better. Your input is invaluable to us, and we ensure that all contributors receive recognition for their efforts.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to contribute","text":"<p>Here\u2019s how you can get involved:</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Blaizzy/fastmlx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. If anything tagged <code>enhancement</code> and <code>help wanted</code> catches your eye, dive in and start coding. Your ideas can become a reality in FastMLX!</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>We\u2019re always in need of more documentation, whether it\u2019s for our official docs, adding helpful comments in the code, or writing blog posts and articles. Clear and comprehensive documentation empowers the community, and your contributions are crucial!</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to share your thoughts is by filing an issue on our GitHub page: https://github.com/Blaizzy/fastmlx/issues. Whether you\u2019re suggesting a new feature or sharing your experience, we want to hear from you!</p> <p>Proposing a feature?</p> <ul> <li>Describe in detail how it should work.</li> <li>Keep it focused and manageable to make implementation smoother.</li> <li>Remember, this is a volunteer-driven project, and your contributions are always appreciated!</li> </ul>"},{"location":"contributing/#how-to-get-started","title":"How to get Started!","text":"<p>Ready to contribute? Follow these simple steps to set up FastMLX for local development and start making a difference.</p> <ol> <li> <p>Fork the repository.</p> <ul> <li>Head over to the fastmlx GitHub repo and click the Fork button to create your copy of the repository.</li> </ul> </li> <li> <p>Clone your fork locally</p> <ul> <li>Open your terminal and run the following command to clone your forked repository:</li> </ul> <pre><code>$ git clone git@github.com:your_name_here/fastmlx.git\n</code></pre> </li> <li> <p>Set Up Your Development Environment</p> <ul> <li>Install your local copy of FastMLX into a virtual environment. If you\u2019re using <code>virtualenvwrapper</code>, follow these steps:</li> </ul> <pre><code>$ mkvirtualenv fastmlx\n$ cd fastmlx/\n$ python setup.py develop\n</code></pre> <p>Tip: If you don\u2019t have <code>virtualenvwrapper</code> installed, you can install it with <code>pip install virtualenvwrapper</code>.</p> </li> <li> <p>Create a Development Branch</p> <ul> <li>Create a new branch to work on your bugfix or feature:</li> </ul> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you\u2019re ready to make changes! </p> </li> <li> <p>Run Tests and Code Checks</p> <ul> <li>When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:</li> </ul> <pre><code>$ flake8 fastmlx tests\n$ pytest .\n</code></pre> <ul> <li>To install flake8 and tox, simply run: <pre><code>pip install flake8 tox\n</code></pre></li> </ul> </li> <li> <p>Commit and Push Your Changes</p> <ul> <li>Once everything looks good, commit your changes with a descriptive message:</li> </ul> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a Pull Request</p> <ul> <li>Head back to the FastMLX GitHub repo and open a pull request. We\u2019ll review your changes, provide feedback, and merge them once everything is ready.</li> </ul> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Blaizzy/fastmlx/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"endpoints/","title":"Endpoints","text":"<p>Top-level package for fastmlx.</p>"},{"location":"endpoints/#fastmlx.add_model","title":"<code>add_model(model_name)</code>  <code>async</code>","text":"<p>Add a new model to the API.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to add.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the status of the operation.</p> Source code in <code>fastmlx/fastmlx.py</code> <pre><code>@app.post(\"/v1/models\")\nasync def add_model(model_name: str):\n    \"\"\"\n    Add a new model to the API.\n\n    Args:\n        model_name (str): The name of the model to add.\n\n    Returns:\n        dict (dict): A dictionary containing the status of the operation.\n    \"\"\"\n    model_provider.load_model(model_name)\n    return {\"status\": \"success\", \"message\": f\"Model {model_name} added successfully\"}\n</code></pre>"},{"location":"endpoints/#fastmlx.chat_completion","title":"<code>chat_completion(request)</code>  <code>async</code>","text":"<p>Handle chat completion requests for both VLM and LM models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatCompletionRequest</code> <p>The chat completion request.</p> required <p>Returns:</p> Name Type Description <code>ChatCompletionResponse</code> <code>ChatCompletionResponse</code> <p>The generated chat completion response.</p> <p>Raises:</p> Type Description <code>HTTPException(str)</code> <p>If MLX library is not available.</p> Source code in <code>fastmlx/fastmlx.py</code> <pre><code>@app.post(\"/v1/chat/completions\", response_model=ChatCompletionResponse)\nasync def chat_completion(request: ChatCompletionRequest):\n    \"\"\"\n    Handle chat completion requests for both VLM and LM models.\n\n    Args:\n        request (ChatCompletionRequest): The chat completion request.\n\n    Returns:\n        ChatCompletionResponse (ChatCompletionResponse): The generated chat completion response.\n\n    Raises:\n        HTTPException (str): If MLX library is not available.\n    \"\"\"\n    if not MLX_AVAILABLE:\n        raise HTTPException(status_code=500, detail=\"MLX library not available\")\n\n    stream = request.stream\n    model_data = model_provider.load_model(request.model)\n    model = model_data[\"model\"]\n    config = model_data[\"config\"]\n    model_type = MODEL_REMAPPING.get(config[\"model_type\"], config[\"model_type\"])\n    stop_words = get_eom_token(request.model)\n\n    if model_type in MODELS[\"vlm\"]:\n        processor = model_data[\"processor\"]\n        image_processor = model_data[\"image_processor\"]\n\n        image_url = None\n        chat_messages = []\n\n        for msg in request.messages:\n            if isinstance(msg.content, str):\n                chat_messages.append({\"role\": msg.role, \"content\": msg.content})\n            elif isinstance(msg.content, list):\n                text_content = \"\"\n                for content_part in msg.content:\n                    if content_part.type == \"text\":\n                        text_content += content_part.text + \" \"\n                    elif content_part.type == \"image_url\":\n                        image_url = content_part.image_url[\"url\"]\n                chat_messages.append(\n                    {\"role\": msg.role, \"content\": text_content.strip()}\n                )\n\n        if not image_url and model_type in MODELS[\"vlm\"]:\n            raise HTTPException(\n                status_code=400, detail=\"Image URL not provided for VLM model\"\n            )\n\n        prompt = \"\"\n        if model.config.model_type != \"paligemma\":\n            prompt = apply_vlm_chat_template(processor, config, chat_messages)\n        else:\n            prompt = chat_messages[-1][\"content\"]\n\n        if stream:\n            return StreamingResponse(\n                vlm_stream_generator(\n                    model,\n                    request.model,\n                    processor,\n                    image_url,\n                    prompt,\n                    image_processor,\n                    request.max_tokens,\n                    request.temperature,\n                ),\n                media_type=\"text/event-stream\",\n            )\n        else:\n            # Generate the response\n            output = vlm_generate(\n                model,\n                processor,\n                image_url,\n                prompt,\n                image_processor,\n                max_tokens=request.max_tokens,\n                temp=request.temperature,\n                verbose=False,\n            )\n\n    else:\n        # Add function calling information to the prompt\n        if request.tools and \"firefunction-v2\" not in request.model:\n            # Handle system prompt\n            if request.messages and request.messages[0].role == \"system\":\n                pass\n            else:\n                # Generate system prompt based on model and tools\n                prompt, user_role = get_tool_prompt(\n                    request.model,\n                    [tool.model_dump() for tool in request.tools],\n                    request.messages[-1].content,\n                )\n\n                if user_role:\n                    request.messages[-1].content = prompt\n                else:\n                    # Insert the system prompt at the beginning of the messages\n                    request.messages.insert(\n                        0, ChatMessage(role=\"system\", content=prompt)\n                    )\n\n        tokenizer = model_data[\"tokenizer\"]\n\n        chat_messages = [\n            {\"role\": msg.role, \"content\": msg.content} for msg in request.messages\n        ]\n        prompt = apply_lm_chat_template(tokenizer, chat_messages, request)\n\n        if stream:\n            return StreamingResponse(\n                lm_stream_generator(\n                    model,\n                    request.model,\n                    tokenizer,\n                    prompt,\n                    request.max_tokens,\n                    request.temperature,\n                    stop_words=stop_words,\n                ),\n                media_type=\"text/event-stream\",\n            )\n        else:\n            output = lm_generate(\n                model,\n                tokenizer,\n                prompt,\n                request.max_tokens,\n                temp=request.temperature,\n                stop_words=stop_words,\n            )\n\n    # Parse the output to check for function calls\n    return handle_function_calls(output, request)\n</code></pre>"},{"location":"endpoints/#fastmlx.get_supported_models","title":"<code>get_supported_models()</code>  <code>async</code>","text":"<p>Get a list of supported model types for VLM and LM.</p> <p>Returns:</p> Name Type Description <code>JSONResponse</code> <code>json</code> <p>A JSON response containing the supported models.</p> Source code in <code>fastmlx/fastmlx.py</code> <pre><code>@app.get(\"/v1/supported_models\", response_model=SupportedModels)\nasync def get_supported_models():\n    \"\"\"\n    Get a list of supported model types for VLM and LM.\n\n    Returns:\n        JSONResponse (json): A JSON response containing the supported models.\n    \"\"\"\n    return JSONResponse(content=MODELS)\n</code></pre>"},{"location":"endpoints/#fastmlx.list_models","title":"<code>list_models()</code>  <code>async</code>","text":"<p>List all available (loaded) models.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the list of available models.</p> Source code in <code>fastmlx/fastmlx.py</code> <pre><code>@app.get(\"/v1/models\")\nasync def list_models():\n    \"\"\"\n    List all available (loaded) models.\n\n    Returns:\n        dict (dict): A dictionary containing the list of available models.\n    \"\"\"\n    return {\"models\": await model_provider.get_available_models()}\n</code></pre>"},{"location":"endpoints/#fastmlx.lm_generate","title":"<code>lm_generate(model, tokenizer, prompt, max_tokens=100, **kwargs)</code>","text":"<p>Generate a complete response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Module</code> <p>The language model.</p> required <code>tokenizer</code> <code>PreTrainedTokenizer</code> <p>The tokenizer.</p> required <code>prompt</code> <code>str</code> <p>The string prompt.</p> required <code>max_tokens</code> <code>int</code> <p>The maximum number of tokens. Default: <code>100</code>.</p> <code>100</code> <code>verbose</code> <code>bool</code> <p>If <code>True</code>, print tokens and timing information.  Default: <code>False</code>.</p> required <code>formatter</code> <code>Optional[Callable]</code> <p>A function which takes a token and a  probability and displays it.</p> required <code>kwargs</code> <p>The remaining options get passed to :func:<code>generate_step</code>. See :func:<code>generate_step</code> for more details.</p> <code>{}</code> Source code in <code>fastmlx/utils.py</code> <pre><code>def lm_generate(\n    model,\n    tokenizer,\n    prompt: str,\n    max_tokens: int = 100,\n    **kwargs,\n) -&gt; Union[str, Generator[str, None, None]]:\n    \"\"\"\n    Generate a complete response from the model.\n\n    Args:\n       model (nn.Module): The language model.\n       tokenizer (PreTrainedTokenizer): The tokenizer.\n       prompt (str): The string prompt.\n       max_tokens (int): The maximum number of tokens. Default: ``100``.\n       verbose (bool): If ``True``, print tokens and timing information.\n           Default: ``False``.\n       formatter (Optional[Callable]): A function which takes a token and a\n           probability and displays it.\n       kwargs: The remaining options get passed to :func:`generate_step`.\n          See :func:`generate_step` for more details.\n    \"\"\"\n    if not isinstance(tokenizer, TokenizerWrapper):\n        tokenizer = TokenizerWrapper(tokenizer)\n\n    stop_words = kwargs.pop(\"stop_words\", [])\n\n    stop_words_id = (\n        tokenizer._tokenizer(stop_words)[\"input_ids\"][0] if stop_words else None\n    )\n\n    prompt_tokens = mx.array(tokenizer.encode(prompt))\n    detokenizer = tokenizer.detokenizer\n\n    detokenizer.reset()\n\n    for (token, logprobs), n in zip(\n        generate_step(prompt_tokens, model, **kwargs),\n        range(max_tokens),\n    ):\n        if token == tokenizer.eos_token_id or (\n            stop_words_id and token in stop_words_id\n        ):\n            break\n\n        detokenizer.add_token(token)\n\n    detokenizer.finalize()\n    return detokenizer.text\n</code></pre>"},{"location":"endpoints/#fastmlx.remove_model","title":"<code>remove_model(model_name)</code>  <code>async</code>","text":"<p>Remove a model from the API.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to remove.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>str</code> <p>A 204 No Content response if successful.</p> <p>Raises:</p> Type Description <code>HTTPException(str)</code> <p>If the model is not found.</p> Source code in <code>fastmlx/fastmlx.py</code> <pre><code>@app.delete(\"/v1/models\")\nasync def remove_model(model_name: str):\n    \"\"\"\n    Remove a model from the API.\n\n    Args:\n        model_name (str): The name of the model to remove.\n\n    Returns:\n        Response (str): A 204 No Content response if successful.\n\n    Raises:\n        HTTPException (str): If the model is not found.\n    \"\"\"\n    model_name = unquote(model_name).strip('\"')\n    removed = await model_provider.remove_model(model_name)\n    if removed:\n        return Response(status_code=204)  # 204 No Content - successful deletion\n    else:\n        raise HTTPException(status_code=404, detail=f\"Model '{model_name}' not found\")\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install the latest stable release of FastMLX, use the following command:</p> <pre><code>pip install -U fastmlx\n</code></pre> <p>This is the recommended method to install FastMLX, as it will always install the most recent stable release.</p> <p>If pip isn't installed, you can follow the Python installation guide to set it up.</p>"},{"location":"installation/#installation-from-sources","title":"Installation from Sources","text":"<p>To install FastMLX directly from the source code, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Blaizzy/fastmlx\n</code></pre>"},{"location":"installation/#running-the-server","title":"Running the Server","text":"<p>There are two ways to start the FastMLX server:</p> <p>Using the <code>fastmlx</code> command:</p> <pre><code>fastmlx\n</code></pre> <p>or</p> <p>Using <code>uvicorn</code> directly:</p> <pre><code>uvicorn fastmlx:app --reload --workers 0\n</code></pre> <p>WARNING: The <code>--reload</code> flag should not be used in production. It is only intended for development purposes.</p>"},{"location":"installation/#additional-notes","title":"Additional Notes","text":"<ul> <li>Dependencies: Ensure that you have the required dependencies installed. FastMLX relies on several libraries, which <code>pip</code> will handle automatically.</li> </ul>"},{"location":"models/","title":"Managing Models","text":""},{"location":"models/#listing-supported-models","title":"Listing Supported Models","text":"<p>To see all vision and language models supported by MLX:</p> <pre><code>import requests\n\nurl = \"http://localhost:8000/v1/supported_models\"\nresponse = requests.get(url)\nprint(response.json())\n</code></pre>"},{"location":"models/#listing-available-models","title":"Listing Available Models","text":"<p>To see all available models:</p> <pre><code>import requests\n\nurl = \"http://localhost:8000/v1/models\"\nresponse = requests.get(url)\nprint(response.json())\n</code></pre>"},{"location":"models/#deleting-models","title":"Deleting Models","text":"<p>To remove any models loaded to memory:</p> <pre><code>import requests\n\nurl = \"http://localhost:8000/v1/models\"\nparams = {\n   \"model_name\": \"hf-repo-or-path\",\n}\nresponse = requests.delete(url, params=params)\nprint(response)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>This guide covers the server setup, and usage of FastMLX, including making API calls and managing models.</p>"},{"location":"usage/#1-installation","title":"1. Installation","text":"<p>Follow the installation guide to install FastMLX.</p>"},{"location":"usage/#2-running-the-server","title":"2. Running the server","text":"<p>Start the FastMLX server with the following command:</p> <pre><code>fastmlx\n</code></pre> <p>or </p> <p>Using <code>uvicorn</code> directly:</p> <pre><code>uvicorn fastmlx:app --reload --workers 0\n</code></pre> <p>[!WARNING] The <code>--reload</code> flag should not be used in production. It is only intended for development purposes.</p>"},{"location":"usage/#running-with-multiple-workers-parallel-processing","title":"Running with Multiple Workers (Parallel Processing)","text":"<p>For improved performance and parallel processing capabilities, you can specify either the absolute number of worker processes or the fraction of CPU cores to use.</p> <p>You can set the number of workers in three ways (listed in order of precedence):</p> <ol> <li> <p>Command-line argument:    <pre><code>fastmlx --workers 4\n</code></pre>    or    <pre><code>uvicorn fastmlx:app --workers 4\n</code></pre></p> </li> <li> <p>Environment variable:    <pre><code>export FASTMLX_NUM_WORKERS=4\nfastmlx\n</code></pre></p> </li> <li> <p>Default value (2 workers)</p> </li> </ol> <p>To use all available CPU cores, set the value to 1.0:</p> <pre><code>fastmlx --workers 1.0\n</code></pre> <p>[!NOTE] - The <code>--reload</code> flag is not compatible with multiple workers. - The number of workers should typically not exceed the number of CPU cores available on your machine for optimal performance.</p>"},{"location":"usage/#considerations-for-multi-worker-setup","title":"Considerations for Multi-Worker Setup","text":"<ol> <li>Stateless Application: Ensure your FastMLX application is stateless, as each worker process operates independently.</li> <li>Database Connections: If your app uses a database, make sure your connection pooling is configured to handle multiple workers.</li> <li>Resource Usage: Monitor your system's resource usage to find the optimal number of workers for your specific hardware and application needs.</li> <li>Load Balancing: When running with multiple workers, incoming requests are automatically load-balanced across the worker processes.</li> </ol>"},{"location":"usage/#3-making-api-calls","title":"3. Making API Calls","text":"<p>Use the API similar to OpenAI's chat completions:</p>"},{"location":"usage/#vision-language-model","title":"Vision Language Model","text":""},{"location":"usage/#without-streaming","title":"Without Streaming","text":"<p>Here's an example of how to use a Vision Language Model:</p> <pre><code>import requests\nimport json\n\nurl = \"http://localhost:8000/v1/chat/completions\"\nheaders = {\"Content-Type\": \"application/json\"}\ndata = {\n    \"model\": \"mlx-community/nanoLLaVA-1.5-4bit\",\n    \"image\": \"http://images.cocodataset.org/val2017/000000039769.jpg\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"What are these\"}],\n    \"max_tokens\": 100\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\nprint(response.json())\n</code></pre>"},{"location":"usage/#without-streaming_1","title":"Without Streaming","text":"<pre><code>import requests\nimport json\n\ndef process_sse_stream(url, headers, data):\n   response = requests.post(url, headers=headers, json=data, stream=True)\n\n   if response.status_code != 200:\n      print(f\"Error: Received status code {response.status_code}\")\n      print(response.text)\n      return\n\n   full_content = \"\"\n\n   try:\n      for line in response.iter_lines():\n            if line:\n               line = line.decode('utf-8')\n               if line.startswith('data: '):\n                  event_data = line[6:]  # Remove 'data: ' prefix\n                  if event_data == '[DONE]':\n                        print(\"\\nStream finished. \u2705\")\n                        break\n                  try:\n                        chunk_data = json.loads(event_data)\n                        content = chunk_data['choices'][0]['delta']['content']\n                        full_content += content\n                        print(content, end='', flush=True)\n                  except json.JSONDecodeError:\n                        print(f\"\\nFailed to decode JSON: {event_data}\")\n                  except KeyError:\n                        print(f\"\\nUnexpected data structure: {chunk_data}\")\n\n   except KeyboardInterrupt:\n      print(\"\\nStream interrupted by user.\")\n   except requests.exceptions.RequestException as e:\n      print(f\"\\nAn error occurred: {e}\")\n\nif __name__ == \"__main__\":\n   url = \"http://localhost:8000/v1/chat/completions\"\n   headers = {\"Content-Type\": \"application/json\"}\n   data = {\n      \"model\": \"mlx-community/nanoLLaVA-1.5-4bit\",\n      \"image\": \"http://images.cocodataset.org/val2017/000000039769.jpg\",\n      \"messages\": [{\"role\": \"user\", \"content\": \"What are these?\"}],\n      \"max_tokens\": 500,\n      \"stream\": True\n   }\n   process_sse_stream(url, headers, data)\n</code></pre>"},{"location":"usage/#language-model","title":"Language Model","text":""},{"location":"usage/#without-streaming_2","title":"Without Streaming","text":"<p>Here's an example of how to use a Language Model:</p> <pre><code>import requests\nimport json\n\nurl = \"http://localhost:8000/v1/chat/completions\"\nheaders = {\"Content-Type\": \"application/json\"}\ndata = {\n    \"model\": \"mlx-community/gemma-2-9b-it-4bit\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the capital of France?\"}],\n    \"max_tokens\": 100\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\nprint(response.json())\n</code></pre>"},{"location":"usage/#with-streaming","title":"With Streaming","text":"<pre><code>import requests\nimport json\n\ndef process_sse_stream(url, headers, data):\n   response = requests.post(url, headers=headers, json=data, stream=True)\n\n   if response.status_code != 200:\n      print(f\"Error: Received status code {response.status_code}\")\n      print(response.text)\n      return\n\n   full_content = \"\"\n\n   try:\n      for line in response.iter_lines():\n            if line:\n               line = line.decode('utf-8')\n               if line.startswith('data: '):\n                  event_data = line[6:]  # Remove 'data: ' prefix\n                  if event_data == '[DONE]':\n                        print(\"\\nStream finished. \u2705\")\n                        break\n                  try:\n                        chunk_data = json.loads(event_data)\n                        content = chunk_data['choices'][0]['delta']['content']\n                        full_content += content\n                        print(content, end='', flush=True)\n                  except json.JSONDecodeError:\n                        print(f\"\\nFailed to decode JSON: {event_data}\")\n                  except KeyError:\n                        print(f\"\\nUnexpected data structure: {chunk_data}\")\n\n   except KeyboardInterrupt:\n      print(\"\\nStream interrupted by user.\")\n   except requests.exceptions.RequestException as e:\n      print(f\"\\nAn error occurred: {e}\")\n\nif __name__ == \"__main__\":\n   url = \"http://localhost:8000/v1/chat/completions\"\n   headers = {\"Content-Type\": \"application/json\"}\n   data = {\n      \"model\": \"mlx-community/gemma-2-9b-it-4bit\",\n      \"messages\": [{\"role\": \"user\", \"content\": \"Hi, how are you?\"}],\n      \"max_tokens\": 500,\n      \"stream\": True\n   }\n   process_sse_stream(url, headers, data)\n</code></pre> <p>For more detailed API documentation, please refer to the API Reference section.</p>"},{"location":"examples/chatbot/","title":"Multi-Modal Chatbot","text":"<p>This example demonstrates how to create a chatbot application using FastMLX with a Gradio interface.</p> <pre><code>import argparse\nimport gradio as gr\nimport requests\nimport json\n\nimport asyncio\n\nasync def process_sse_stream(url, headers, data):\n    response = requests.post(url, headers=headers, json=data, stream=True)\n    if response.status_code != 200:\n        raise gr.Error(f\"Error: Received status code {response.status_code}\")\n    full_content = \"\"\n    for line in response.iter_lines():\n        if line:\n            line = line.decode('utf-8')\n            if line.startswith('data: '):\n                event_data = line[6:]  # Remove 'data: ' prefix\n                if event_data == '[DONE]':\n                    break\n                try:\n                    chunk_data = json.loads(event_data)\n                    content = chunk_data['choices'][0]['delta']['content']\n                    yield str(content)\n                except (json.JSONDecodeError, KeyError):\n                    continue\n\nasync def chat(message, history, temperature, max_tokens):\n\n    url = \"http://localhost:8000/v1/chat/completions\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = {\n        \"model\": \"mlx-community/Qwen2.5-1.5B-Instruct-4bit\",\n        \"messages\": [{\"role\": \"user\", \"content\": message['text']}],\n        \"max_tokens\": max_tokens,\n        \"temperature\": temperature,\n        \"stream\": True\n    }\n\n    if len(message['files']) &gt; 0:\n        data[\"model\"] = \"mlx-community/nanoLLaVA-1.5-8bit\"\n        data[\"image\"] = message['files'][-1][\"path\"]\n\n    response = requests.post(url, headers=headers, json=data, stream=True)\n    if response.status_code != 200:\n        raise gr.Error(f\"Error: Received status code {response.status_code}\")\n\n    full_content = \"\"\n    for line in response.iter_lines():\n        if line:\n            line = line.decode('utf-8')\n            if line.startswith('data: '):\n                event_data = line[6:]  # Remove 'data: ' prefix\n                if event_data == '[DONE]':\n                    break\n                try:\n                    chunk_data = json.loads(event_data)\n                    content = chunk_data['choices'][0]['delta']['content']\n                    full_content += content\n                    yield full_content\n                except (json.JSONDecodeError, KeyError):\n                    continue\n\ndemo = gr.ChatInterface(\n    fn=chat,\n    title=\"FastMLX Chat UI\",\n    additional_inputs_accordion=gr.Accordion(\n        label=\"\u2699\ufe0f Parameters\", open=False, render=False\n    ),\n    additional_inputs=[\n        gr.Slider(\n            minimum=0, maximum=1, step=0.1, value=0.1, label=\"Temperature\", render=False\n        ),\n        gr.Slider(\n            minimum=128,\n            maximum=4096,\n            step=1,\n            value=200,\n            label=\"Max new tokens\",\n            render=False\n        ),\n    ],\n    multimodal=True,\n)\n\ndemo.launch(inbrowser=True)\n</code></pre>"},{"location":"examples/function_calling/","title":"Function Calling","text":""},{"location":"examples/function_calling/#function-calling","title":"Function Calling","text":"<p>FastMLX now supports tool calling in accordance with the OpenAI API specification. This feature is available for the following models:</p> <ul> <li>Llama 3.1</li> <li>Arcee Agent</li> <li>C4ai-Command-R-Plus</li> <li>Firefunction</li> <li>xLAM</li> </ul> <p>Supported modes:</p> <ul> <li>Without Streaming</li> <li>Parallel Tool Calling</li> </ul> <p>Note: Tool choice and OpenAI-compliant streaming for function calling are currently under development.</p> <p>This example demonstrates how to use the <code>get_current_weather</code> tool with the <code>Llama 3.1</code> model. The API will process the user's question and use the provided tool to fetch the required information.</p> <pre><code>import requests\nimport json\n\nurl = \"http://localhost:8000/v1/chat/completions\"\nheaders = {\"Content-Type\": \"application/json\"}\ndata = {\n  \"model\": \"mlx-community/Meta-Llama-3.1-8B-Instruct-8bit\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What's the weather like in San Francisco and Washington?\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"name\": \"get_current_weather\",\n      \"description\": \"Get the current weather\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\"\n          },\n          \"format\": {\n            \"type\": \"string\",\n            \"enum\": [\"celsius\", \"fahrenheit\"],\n            \"description\": \"The temperature unit to use. Infer this from the user's location.\"\n          }\n        },\n        \"required\": [\"location\", \"format\"]\n      }\n    }\n  ],\n  \"max_tokens\": 150,\n  \"temperature\": 0.7,\n  \"stream\": False,\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\nprint(response.json())\n</code></pre> <p>Note: Streaming is available for regular text generation, but the streaming implementation for function calling is still in development and does not yet fully comply with the OpenAI specification.</p>"}]}